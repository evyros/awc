{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, Component, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nlet MylibService = /*#__PURE__*/(() => {\n  class MylibService {\n    constructor() {}\n\n  }\n\n  MylibService.ɵfac = function MylibService_Factory(t) {\n    return new (t || MylibService)();\n  };\n\n  MylibService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: MylibService,\n    factory: MylibService.ɵfac,\n    providedIn: 'root'\n  });\n  return MylibService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet MylibComponent = /*#__PURE__*/(() => {\n  class MylibComponent {\n    constructor() {}\n\n    ngOnInit() {}\n\n  }\n\n  MylibComponent.ɵfac = function MylibComponent_Factory(t) {\n    return new (t || MylibComponent)();\n  };\n\n  MylibComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: MylibComponent,\n    selectors: [[\"lib-mylib\"]],\n    decls: 2,\n    vars: 0,\n    template: function MylibComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \" mylib works! \");\n        i0.ɵɵelementEnd();\n      }\n    },\n    encapsulation: 2\n  });\n  return MylibComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet MylibModule = /*#__PURE__*/(() => {\n  class MylibModule {}\n\n  MylibModule.ɵfac = function MylibModule_Factory(t) {\n    return new (t || MylibModule)();\n  };\n\n  MylibModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: MylibModule\n  });\n  MylibModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[]]\n  });\n  return MylibModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet ButtonComponent = /*#__PURE__*/(() => {\n  class ButtonComponent {\n    constructor() {}\n\n    ngOnInit() {}\n\n  }\n\n  ButtonComponent.ɵfac = function ButtonComponent_Factory(t) {\n    return new (t || ButtonComponent)();\n  };\n\n  ButtonComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: ButtonComponent,\n    selectors: [[\"lib-button\"]],\n    decls: 2,\n    vars: 0,\n    template: function ButtonComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"p\");\n        i0.ɵɵtext(1, \"button works!\");\n        i0.ɵɵelementEnd();\n      }\n    },\n    styles: [\"\"]\n  });\n  return ButtonComponent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet ButtonModule = /*#__PURE__*/(() => {\n  class ButtonModule {}\n\n  ButtonModule.ɵfac = function ButtonModule_Factory(t) {\n    return new (t || ButtonModule)();\n  };\n\n  ButtonModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: ButtonModule\n  });\n  ButtonModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return ButtonModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Public API Surface of mylib\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { ButtonComponent, ButtonModule, MylibComponent, MylibModule, MylibService }; //# sourceMappingURL=mylib.js.map","map":null,"metadata":{},"sourceType":"module"}